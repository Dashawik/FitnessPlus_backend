generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  TRAINER
  ADMIN
}

model User {
  id            Int        @id @default(autoincrement())
  email         String     @unique
  firstName     String
  lastName      String
  password      String
  role          Role       @default(USER)
  emailVerified Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  tokens        Token[]
  jwt           JWT?
  Training      Training[]
  bookings      Booking[]
  subscriptions Subscription[]
}

enum TokenType {
  VERIFICATION
  RESET
}

model Token {
  id        Int       @id @default(autoincrement())
  userId    Int
  type      TokenType
  token     String    @unique
  createdAt DateTime  @default(now()) @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, type])
}

model JWT {
  id         Int      @id @default(autoincrement())
  userId     Int      @unique
  token      String
  createdAt  DateTime @default(now())
  lastUsedAt DateTime @default(now())
  User       User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model TrainingType {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  trainings Training[]
}

model SubscriptionTemplate {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  price        Float
  sessionLimit Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  subscriptions Subscription[]
}

model Subscription {
  id                 Int      @id @default(autoincrement())
  userId             Int
  templateId         Int
  startDate          DateTime @default(now())
  endDate            DateTime
  availableSessions  Int      @default(0)
  isActive           Boolean  @default(true)
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  template           SubscriptionTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Training {
  id             Int      @id @default(autoincrement())
  startTime      DateTime
  endTime        DateTime   
  typeId         Int
  type           TrainingType @relation(fields: [typeId], references: [id])   
  trainerId      Int
  trainer        User     @relation(fields: [trainerId], references: [id])
  availableSpots Int      @default(1)
  bookings       Booking[]
}

enum BookingStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

model Booking {
  id          Int      @id @default(autoincrement())
  userId      Int
  trainingId  Int
  status      BookingStatus @default(ACTIVE)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  training    Training @relation(fields: [trainingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@unique([userId, trainingId])
}